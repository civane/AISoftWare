Bug Description: when encountering '(', the code pushes the current sign onto the stack but does not reset operationSign for the new parenthesis scope. That leaves the outer sign active inside the parentheses, so every number parsed inside the parentheses is incorrectly multiplied by the outer sign instead of using the local signs.

Bug Location: Missing a code between lines 22 and 23

Suggested Patch:
+ operationSign = 1;

After pushing the previous total and sign, reset operationSign = 1 so the inner expression starts with a clean state.

Fixed Version:
import java.util.ArrayDeque;
import java.util.Deque;
public class Solution {
    public int calculate(String s) {
        Deque<Integer> stateStack = new ArrayDeque<>();
        int total = 0;
        int currentNumber = 0;
        int operationSign = 1;
        for (int index = 0; index < s.length(); index++) {
            char character = s.charAt(index);
            if (Character.isDigit(character)) {
                currentNumber = currentNumber * 10 + (character - '0');
                continue;
            }
            if (character == '(') {
                stateStack.push(total);
                stateStack.push(operationSign);
                total = 0;
                operationSign = 1;
            } else if (character == ')') {
                total += operationSign * currentNumber;
                currentNumber = 0;
                total *= stateStack.pop(); // pop sign
                total += stateStack.pop(); // pop previous total
            } else if (character == '+') {
                total += operationSign * currentNumber;
                currentNumber = 0;
                operationSign = 1;
            } else if (character == '-') {
                total += operationSign * currentNumber;
                currentNumber = 0;
                operationSign = -1;
            }
            // ignore other characters (e.g. spaces)
        }
        if (currentNumber != 0) {
            total += operationSign * currentNumber;
        }
        return total;
    }
}